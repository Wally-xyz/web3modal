{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA6BA,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,gDAA+B,CAAA;IAC/B,gDAA+B,CAAA;AACjC,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AA0CD,iDAAiD;AACjD,IAAY,eAQX;AARD,WAAY,eAAe;IACzB,4CAAyB,CAAA;IACzB,2DAAwC,CAAA;IACxC,kDAA+B,CAAA;IAC/B,oCAAiB,CAAA;IACjB,mDAAgC,CAAA;IAChC,2DAAwC,CAAA;IACxC,2DAAwC,CAAA;AAC1C,CAAC,EARW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAQ1B;AAID,0CAA0C;AAC1C,IAAY,aAmCX;AAnCD,WAAY,aAAa;IACvB,2DAA0C,CAAA;IAC1C,uCAAsB,CAAA;IACtB,4CAA2B,CAAA;IAC3B,gDAA+B,CAAA;IAC/B,yDAAwC,CAAA;IACxC,wCAAuB,CAAA;IACvB,2CAA0B,CAAA;IAC1B,iDAAgC,CAAA;IAChC,+CAA8B,CAAA;IAC9B,oDAAmC,CAAA;IACnC,kEAAiD,CAAA;IACjD,2FAA0E,CAAA;IAC1E,+FAA8E,CAAA;IAC9E,+EAA8D,CAAA;IAC9D,mFAAkE,CAAA;IAClE,yCAAwB,CAAA;IACxB,gEAA+C,CAAA;IAC/C,kCAAiB,CAAA;IACjB,iDAAgC,CAAA;IAChC,yDAAwC,CAAA;IACxC,6DAA4C,CAAA;IAC5C,qEAAoD,CAAA;IACpD,kGAAiF,CAAA;IACjF,sGAAqF,CAAA;IACrF,sEAAqD,CAAA;IACrD,sFAAqE,CAAA;IACrE,0FAAyE,CAAA;IACzE,6CAA4B,CAAA;IAC5B,wDAAuC,CAAA;IACvC,mFAAkE,CAAA;IAClE,yDAAwC,CAAA;IACxC,4DAA2C,CAAA;IAC3C,sDAAqC,CAAA;IACrC,yCAAwB,CAAA;AAC1B,CAAC,EAnCW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAmCxB;AAID,oEAAoE;AACpE,0CAA0C;AAC1C,IAAY,qBAYX;AAZD,WAAY,qBAAqB;IAC/B,wDAA+B,CAAA;IAC/B,kDAAyB,CAAA;IACzB,8CAAqB,CAAA;IACrB,kDAAyB,CAAA;IACzB,2DAAkC,CAAA;IAClC,iEAAwC,CAAA;IACxC,uDAA8B,CAAA;IAC9B,+DAAsC,CAAA;IACtC,iDAAwB,CAAA;IACxB,uDAA8B,CAAA;IAC9B,+DAAsC,CAAA;AACxC,CAAC,EAZW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAYhC","sourcesContent":["import {\n  TypedDataDomain,\n  TypedDataField,\n} from '@ethersproject/abstract-signer';\nimport {\n  Block,\n  Filter,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse,\n} from '@ethersproject/providers';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport type SignedMessage = {\n  address: string;\n  signature: string;\n};\n\nexport type WallyConnectorOptions = {\n  clientId: string;\n  isDevelopment?: boolean;\n  devUrl?: string;\n};\n\nexport type RedirectOptions = {\n  closeWindow?: boolean;\n  appendContent?: boolean;\n};\n\nexport enum WorkerMessage {\n  LOGIN_SUCCESS = 'login-success',\n  LOGIN_FAILURE = 'login-failure',\n}\n\nexport type RequestObj<T extends MethodNameType> = T extends WallyMethodNameType\n  ? WallyRequestObj<T>\n  : T extends RPCMethodNameType\n  ? RPCRequestObj<T> : undefined;\n\nexport type WallyRequestObj<T extends WallyMethodName | WallyMethodNameType> = {\n  method: T;\n} & (T extends WallyMethodNoParams\n  ? undefined\n  : {\n      params: WallyMethodParams<T>;\n    });\n\nexport type RPCRequestObj<T extends RPCMethodName | RPCMethodNameType> = {\n  method: T;\n} & (T extends RPCMethodNoParams\n  ? undefined\n  : {\n      params: RPCMethodParams<T>;\n    });\n\n// TODO: Tighten these up - I think more can be BigNumberish\nexport type HexString = string;\nexport type Address = HexString;\nexport type BlockNumber = HexString | number;\nexport type Index = string;\nexport type FilterId = string;\nexport type BlockHash = HexString;\nexport type TransactionHash = HexString;\nexport type Signature = HexString;\nexport type BlockTag = BlockNumber | 'earliest' | 'latest' | 'pending';\n\n// Matches dto in api\nexport interface UnsignedTypedData {\n  types: Record<string, Array<TypedDataField>>;\n  primaryType: string;\n  domain: TypedDataDomain;\n  message: Record<string, any>;\n}\n\n// \"RPC\" methods that need information from wally\nexport enum WallyMethodName {\n  ACCOUNTS = 'eth_accounts',\n  REQUEST_ACCOUNTS = 'eth_requestAccounts',\n  PERSONAL_SIGN = 'personal_sign',\n  SIGN = 'eth_sign',\n  SIGN_TYPED = 'eth_signTypedData',\n  SIGN_TRANSACTION = 'eth_signTransaction',\n  SEND_TRANSACTION = 'eth_sendTransaction',\n}\n\nexport type WallyMethodNameType = `${WallyMethodName}`;\n\n// RPC methods that go directly to alchemy\nexport enum RPCMethodName {\n  WEB3_CLIENT_VERSION = 'web3_clientVersion',\n  WEB3_SHA = 'web3_sha3',\n  NET_VERSION = 'net_version',\n  NET_LISTENING = 'net_listening',\n  PROFOCOL_VERSION = 'eth_protocolVersion',\n  SYNCING = 'eth_syncing',\n  GAS_PRICE = 'eth_gasPrice',\n  BLOCK_NUMBER = 'eth_blockNumber',\n  GET_BALANCE = 'eth_getBalance',\n  GET_STORAGE_AT = 'eth_getStorageAt',\n  GET_TRANSACTION_COUNT = 'eth_getTransactionCount',\n  GET_BLOCK_TRANSACTION_COUNT_BY_HASH = 'eth_getBlockTransactionCountByHash',\n  GET_BLOCK_TRANSACTION_COUNT_BY_NUMBER = 'eth_getBlockTransactionCountByNumber',\n  GET_UNCLE_COUNT_BY_BLOCK_HASH = 'eth_getUncleCountByBlockHash',\n  GET_UNCLE_COUNT_BY_BLOCK_NUMBER = 'eth_getUncleCountByBlockNumber',\n  GET_CODE = 'eth_getCode',\n  SEND_RAW_TRANSACTION = 'eth_sendRawTransaction',\n  CALL = 'eth_call',\n  ESTIMATE_GAS = 'eth_estimateGas',\n  GET_BLOCK_BY_HASH = 'eth_getBlockByHash',\n  GET_BLOCK_BY_NUMBER = 'eth_getBlockByNumber',\n  GET_TRANSACTION_BY_HASH = 'eth_getTransactionByHash',\n  GET_TRANSACTION_BY_BLOCK_HASH_AND_INDEX = 'eth_getTransactionByBlockHashAndIndex',\n  GET_TRANSACTION_BY_BLOCK_NUMBER_AND_INDEX = 'eth_getTransactionByBlockNumberAndIndex',\n  GET_TRANSACTION_RECEIPT = 'eth_getTransactionReceipt',\n  GET_UNCLE_BY_BLOCK_HASH_AND_INDEX = 'eth_getUncleByBlockHashAndIndex',\n  GET_UNCLE_BY_BLOCK_NUMBER_AND_INDEX = 'eth_getUncleByBlockNumberAndIndex',\n  NEW_FILTER = 'eth_newFilter',\n  NEW_BLOCK_FILTER = 'eth_newBlockFilter',\n  NEW_PENDING_TRANSACTION_FILTER = 'eth_newPendingTransactionFilter',\n  UNINSTALL_FILTER = 'eth_uninstallFilter',\n  GET_FILTER_CHANGES = 'eth_getFilterChanges',\n  GET_FILTER_LOGS = 'eth_getFilterLogs',\n  GET_LOGS = 'eth_getLogs',\n}\n\nexport type RPCMethodNameType = `${RPCMethodName}`;\n\n// More popular unsupported methods for more explicit error handling\n// TBH might not even need this definition\nexport enum UnsupportedMethodName {\n  NET_PEERCOUNT = 'net_peerCount',\n  COINBASE = 'eth_coinbase',\n  MINING = 'eth_mining',\n  HASHRATE = 'eth_hashrate',\n  GET_COMPILERS = 'eth_getCompilers',\n  COMPILE_SOLIDITY = 'eth_compileSolidity',\n  COMPILE_LLL = 'eth_compileLLL',\n  COMPILE_SERPEND = 'eth_compileSerpent',\n  GET_WORK = 'eth_getWork',\n  SUBMIT_WORK = 'eth_submitWork',\n  SUBMIT_HASHRATE = 'eth_sumbitHashrate',\n}\n\nexport type MethodName = WallyMethodName | RPCMethodName;\nexport type MethodNameType = WallyMethodNameType | RPCMethodNameType;\nexport type SignParams = [Address, any];\nexport type PersonalSignParams = [any, Address];\n\ntype WallyMethodNoParams =\n  | `${WallyMethodName.ACCOUNTS}`\n  | `${WallyMethodName.REQUEST_ACCOUNTS}`\n\nexport type WallyMethodParams<T> = T extends `${WallyMethodName.PERSONAL_SIGN}`\n  ? PersonalSignParams\n  : T extends `${WallyMethodName.SIGN}`\n  ? SignParams\n  : T extends WallyMethodNoParams\n  ? undefined\n  : T extends\n      | `${WallyMethodName.SEND_TRANSACTION}`\n      | `${WallyMethodName.SIGN_TRANSACTION}`\n  ? [TransactionRequest]\n  : T extends `${WallyMethodName.SIGN_TYPED}`\n  ? [UnsignedTypedData]\n  : undefined;\n\ntype RPCMethodNoParams =\n  | `${RPCMethodName.WEB3_CLIENT_VERSION}`\n  | `${RPCMethodName.NET_VERSION}`\n  | `${RPCMethodName.NET_LISTENING}`\n  | `${RPCMethodName.PROFOCOL_VERSION}`\n  | `${RPCMethodName.SYNCING}`\n  | `${RPCMethodName.GAS_PRICE}`\n  | `${RPCMethodName.BLOCK_NUMBER}`\n  | `${RPCMethodName.NEW_BLOCK_FILTER}`\n  | `${RPCMethodName.NEW_PENDING_TRANSACTION_FILTER}`\n\nexport type RPCMethodParams<T> = T extends RPCMethodNoParams\n  ? undefined\n  : T extends `${RPCMethodName.GET_BALANCE}` | `${RPCMethodName.GET_TRANSACTION_COUNT}`\n  ? [Address, BlockTag]\n  : T extends `${RPCMethodName.GET_STORAGE_AT}`\n  ? [Address, BigNumberish, BlockTag]\n  : T extends\n      | `${RPCMethodName.GET_BLOCK_TRANSACTION_COUNT_BY_HASH}`\n      | `${RPCMethodName.GET_UNCLE_COUNT_BY_BLOCK_HASH}`\n  ? [BlockHash]\n  : T extends\n      | `${RPCMethodName.GET_BLOCK_TRANSACTION_COUNT_BY_NUMBER}`\n      | `${RPCMethodName.GET_UNCLE_COUNT_BY_BLOCK_NUMBER}`\n  ? [BlockTag]\n  : T extends `${RPCMethodName.GET_CODE}`\n  ? [Address, BlockTag]\n  : T extends `${RPCMethodName.SEND_RAW_TRANSACTION}`\n  ? [Signature]\n  : T extends `${RPCMethodName.CALL}` | `${RPCMethodName.ESTIMATE_GAS}`\n  ? [TransactionRequest]\n  : T extends `${RPCMethodName.GET_BLOCK_BY_HASH}`\n  ? [BlockHash, boolean]\n  : T extends `${RPCMethodName.GET_BLOCK_BY_NUMBER}`\n  ? [BlockTag, boolean]\n  : T extends `${RPCMethodName.GET_TRANSACTION_BY_HASH}`\n  ? [TransactionHash]\n  : T extends `${RPCMethodName.GET_TRANSACTION_BY_BLOCK_HASH_AND_INDEX}`\n  ? [BlockHash, Index]\n  : T extends `${RPCMethodName.GET_TRANSACTION_BY_BLOCK_NUMBER_AND_INDEX}`\n  ? [BlockTag, Index]\n  : T extends `${RPCMethodName.GET_TRANSACTION_BY_BLOCK_NUMBER_AND_INDEX}`\n  ? [BlockTag, Index]\n  : T extends `${RPCMethodName.GET_TRANSACTION_RECEIPT}`\n  ? [TransactionHash]\n  : T extends `${RPCMethodName.GET_UNCLE_BY_BLOCK_HASH_AND_INDEX}`\n  ? [BlockHash, Index]\n  : T extends `${RPCMethodName.GET_UNCLE_BY_BLOCK_NUMBER_AND_INDEX}`\n  ? [BlockTag, Index]\n  : T extends `${RPCMethodName.NEW_FILTER}`\n  ? [Filter]\n  : T extends\n      | `${RPCMethodName.UNINSTALL_FILTER}`\n      | `${RPCMethodName.GET_FILTER_CHANGES}`\n      | `${RPCMethodName.GET_FILTER_LOGS}`\n  ? [FilterId]\n  : null;\n\nexport type WallyResponse<T> = T extends `${WallyMethodName.SEND_TRANSACTION}`\n  ? TransactionResponse\n  : T extends\n      | `${WallyMethodName.PERSONAL_SIGN}`\n      | `${WallyMethodName.SIGN}`\n      | `${WallyMethodName.SIGN_TYPED}`\n      | `${WallyMethodName.SIGN_TRANSACTION}`\n  ? string\n  : T extends `${WallyMethodName.ACCOUNTS}` | `${WallyMethodName.REQUEST_ACCOUNTS}`\n  ? string[]\n  : null;\n\nexport type RPCResponse<T> = T extends `${RPCMethodName.NET_LISTENING}`\n  ? boolean\n  : T extends `${RPCMethodName.SYNCING}`\n  ? boolean\n  : T extends `${RPCMethodName.UNINSTALL_FILTER}`\n  ? boolean\n  : T extends `${RPCMethodName.WEB3_CLIENT_VERSION}`\n  ? string\n  : T extends\n      | `${RPCMethodName.NET_VERSION}`\n      | `${RPCMethodName.PROFOCOL_VERSION}`\n      | `${RPCMethodName.GAS_PRICE}`\n      | `${RPCMethodName.BLOCK_NUMBER}`\n      | `${RPCMethodName.GET_BALANCE}`\n      | `${RPCMethodName.GET_TRANSACTION_COUNT}`\n      | `${RPCMethodName.GET_STORAGE_AT}`\n      | `${RPCMethodName.GET_BLOCK_TRANSACTION_COUNT_BY_HASH}`\n      | `${RPCMethodName.GET_UNCLE_COUNT_BY_BLOCK_HASH}`\n      | `${RPCMethodName.GET_BLOCK_TRANSACTION_COUNT_BY_NUMBER}`\n      | `${RPCMethodName.GET_UNCLE_COUNT_BY_BLOCK_NUMBER}`\n      | `${RPCMethodName.GET_CODE}`\n      | `${RPCMethodName.CALL}`\n      | `${RPCMethodName.ESTIMATE_GAS}`\n      | `${RPCMethodName.GET_UNCLE_BY_BLOCK_HASH_AND_INDEX}`\n      | `${RPCMethodName.GET_UNCLE_BY_BLOCK_NUMBER_AND_INDEX}`\n      | `${RPCMethodName.NEW_FILTER}`\n      | `${RPCMethodName.NEW_BLOCK_FILTER}`\n      | `${RPCMethodName.NEW_PENDING_TRANSACTION_FILTER}`\n  ? HexString\n  : T extends `${RPCMethodName.GET_FILTER_CHANGES}`\n  ? HexString[]\n  : T extends `${RPCMethodName.SEND_RAW_TRANSACTION}`\n  ? TransactionHash\n  : T extends\n      | `${RPCMethodName.GET_BLOCK_BY_HASH}`\n      | `${RPCMethodName.GET_BLOCK_BY_NUMBER}`\n  ? Block\n  : T extends\n      | `${RPCMethodName.GET_TRANSACTION_BY_HASH}`\n      | `${RPCMethodName.GET_TRANSACTION_BY_BLOCK_HASH_AND_INDEX}`\n      | `${RPCMethodName.GET_TRANSACTION_BY_BLOCK_NUMBER_AND_INDEX}`\n      | `${RPCMethodName.GET_TRANSACTION_BY_BLOCK_NUMBER_AND_INDEX}`\n  ? TransactionResponse\n  : T extends `${RPCMethodName.GET_TRANSACTION_RECEIPT}`\n  ? TransactionReceipt\n  // TODO - figure out what the log format is\n  : T extends `${RPCMethodName.GET_FILTER_LOGS}`\n  ? any\n  : null;\n\nexport type MethodResponse<T> = WallyResponse<T> | RPCResponse<T>;\n"]}