{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../src/worker.ts"],"names":[],"mappings":";AAKA,MAAM,KAAK,GAA4B,IAAW,CAAC;AAEnD,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;AAEjB,MAAM,SAAS,GAAG,CAAC,CAAe,EAAE,EAAE;IACpC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAClD,CAAC,CAAA;AAED,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC;IAC3B,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;AACf,CAAC,CAAA","sourcesContent":["interface SharedWorkerGlobalScope {\n  onconnect: (event: MessageEvent) => void;\n  ports: MessagePort[];\n}\n\nconst _self: SharedWorkerGlobalScope = self as any;\n\n_self.ports = [];\n\nconst broadcast = (e: MessageEvent) => {\n  _self.ports.forEach(p => p.postMessage(e.data));\n}\n\n_self.onconnect = function (e) {\n  const port = e.ports[0];\n  _self.ports.push(port);\n  port.addEventListener('message', broadcast)\n  port.start();\n}\n"]}